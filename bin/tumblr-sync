#!/usr/bin/env ruby

require 'optparse'
require 'thread'
require 'ruby-progressbar'

$:.unshift(File.join(File.dirname(__FILE__), "/../lib"))
require 'tumblr-sync'

module TumblrSync
  class Runner
    
    CONCURRENCY = 8
    
    def initialize(arguments)
      @arguments = arguments
      @start ||= 0
      @number ||= 50
    end
    
    def run
      parse_options
      
      @concurrency ||= CONCURRENCY
      @tumblr = TumblrSync::Site.new(@arguments.last)
      @progress = ProgressBar.create(:title => "Images", :starting_at => 0, :total => @tumblr.total)
      FileUtils.mkdir_p(@tumblr.host)
      loop do
        images = @tumblr.images(@start, @number)
        images.each_slice(@concurrency).each do |group|
          threads = []
          group.each do |url|
            threads << Thread.new {
              begin
                file = Mechanize::File.new(URI(url))
                unless File.exists?("#{@tumblr.host}/#{file.filename}")
                  file = @tumblr.agent.get(url)
                  file.save("#{@tumblr.host}/#{file.filename}")
                end
                @progress.increment
              rescue Mechanize::ResponseCodeError
                puts "Error getting file, #{$!}"
              end
            }
          end
          threads.each{ |thread| thread.join }
        end
        if images.count < @number
          break
        else
          @start += @number
        end
      end
    end
    
    private
    
    def parse_options
      options = OptionParser.new
      options.banner = "Usage: #{$0} [options] [tumblr]"
      options.on('-c', '--concurrency NUMBER', "Specify how many threads you want (Default: #{CONCURRENCY})") { |concurrency| @concurrency = concurrency.to_i }
      options.on('-h', '--help', "Show this message") { puts(options); exit }
      begin
        raise if options.getopts.empty? && ARGV.empty?
        options.parse!(@arguments)
      rescue
        puts options
        exit
      end
    end
  end
end

begin
  runner = TumblrSync::Runner.new(ARGV)
  runner.run
rescue => ex
  puts ex
end
